/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/_prisma_migrations": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_prisma_migrations"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter._prisma_migrations.id"];
          checksum?: parameters["rowFilter._prisma_migrations.checksum"];
          finished_at?: parameters["rowFilter._prisma_migrations.finished_at"];
          migration_name?: parameters["rowFilter._prisma_migrations.migration_name"];
          logs?: parameters["rowFilter._prisma_migrations.logs"];
          rolled_back_at?: parameters["rowFilter._prisma_migrations.rolled_back_at"];
          started_at?: parameters["rowFilter._prisma_migrations.started_at"];
          applied_steps_count?: parameters["rowFilter._prisma_migrations.applied_steps_count"];
        };
        body: {
          /** _prisma_migrations */
          _prisma_migrations?: definitions["_prisma_migrations"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Experience": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Experience.id"];
          name?: parameters["rowFilter.Experience.name"];
          shortDescription?: parameters["rowFilter.Experience.shortDescription"];
          description?: parameters["rowFilter.Experience.description"];
          technologies?: parameters["rowFilter.Experience.technologies"];
          url?: parameters["rowFilter.Experience.url"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Experience"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Experience */
          Experience?: definitions["Experience"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Experience.id"];
          name?: parameters["rowFilter.Experience.name"];
          shortDescription?: parameters["rowFilter.Experience.shortDescription"];
          description?: parameters["rowFilter.Experience.description"];
          technologies?: parameters["rowFilter.Experience.technologies"];
          url?: parameters["rowFilter.Experience.url"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Experience.id"];
          name?: parameters["rowFilter.Experience.name"];
          shortDescription?: parameters["rowFilter.Experience.shortDescription"];
          description?: parameters["rowFilter.Experience.description"];
          technologies?: parameters["rowFilter.Experience.technologies"];
          url?: parameters["rowFilter.Experience.url"];
        };
        body: {
          /** Experience */
          Experience?: definitions["Experience"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Attachment": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Attachment.id"];
          label?: parameters["rowFilter.Attachment.label"];
          url?: parameters["rowFilter.Attachment.url"];
          type?: parameters["rowFilter.Attachment.type"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Attachment"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Attachment */
          Attachment?: definitions["Attachment"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Attachment.id"];
          label?: parameters["rowFilter.Attachment.label"];
          url?: parameters["rowFilter.Attachment.url"];
          type?: parameters["rowFilter.Attachment.type"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Attachment.id"];
          label?: parameters["rowFilter.Attachment.label"];
          url?: parameters["rowFilter.Attachment.url"];
          type?: parameters["rowFilter.Attachment.type"];
        };
        body: {
          /** Attachment */
          Attachment?: definitions["Attachment"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Member": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Member.id"];
          name?: parameters["rowFilter.Member.name"];
          position?: parameters["rowFilter.Member.position"];
          yearOfExperiences?: parameters["rowFilter.Member.yearOfExperiences"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Member"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Member */
          Member?: definitions["Member"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Member.id"];
          name?: parameters["rowFilter.Member.name"];
          position?: parameters["rowFilter.Member.position"];
          yearOfExperiences?: parameters["rowFilter.Member.yearOfExperiences"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Member.id"];
          name?: parameters["rowFilter.Member.name"];
          position?: parameters["rowFilter.Member.position"];
          yearOfExperiences?: parameters["rowFilter.Member.yearOfExperiences"];
        };
        body: {
          /** Member */
          Member?: definitions["Member"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/Expertise": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Expertise.id"];
          name?: parameters["rowFilter.Expertise.name"];
          description?: parameters["rowFilter.Expertise.description"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["Expertise"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** Expertise */
          Expertise?: definitions["Expertise"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Expertise.id"];
          name?: parameters["rowFilter.Expertise.name"];
          description?: parameters["rowFilter.Expertise.description"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.Expertise.id"];
          name?: parameters["rowFilter.Expertise.name"];
          description?: parameters["rowFilter.Expertise.description"];
        };
        body: {
          /** Expertise */
          Expertise?: definitions["Expertise"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/_member": {
    get: {
      parameters: {
        query: {
          A?: parameters["rowFilter._member.A"];
          B?: parameters["rowFilter._member.B"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_member"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _member */
          _member?: definitions["_member"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          A?: parameters["rowFilter._member.A"];
          B?: parameters["rowFilter._member.B"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          A?: parameters["rowFilter._member.A"];
          B?: parameters["rowFilter._member.B"];
        };
        body: {
          /** _member */
          _member?: definitions["_member"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/_experience": {
    get: {
      parameters: {
        query: {
          A?: parameters["rowFilter._experience.A"];
          B?: parameters["rowFilter._experience.B"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["_experience"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** _experience */
          _experience?: definitions["_experience"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          A?: parameters["rowFilter._experience.A"];
          B?: parameters["rowFilter._experience.B"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          A?: parameters["rowFilter._experience.A"];
          B?: parameters["rowFilter._experience.B"];
        };
        body: {
          /** _experience */
          _experience?: definitions["_experience"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  _prisma_migrations: {
    /**
     * Format: character varying
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: character varying */
    checksum: string;
    /** Format: timestamp with time zone */
    finished_at?: string;
    /** Format: character varying */
    migration_name: string;
    /** Format: text */
    logs?: string;
    /** Format: timestamp with time zone */
    rolled_back_at?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    started_at: string;
    /**
     * Format: integer
     * @default 0
     */
    applied_steps_count: number;
  };
  Experience: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: text */
    shortDescription: string;
    /** Format: text */
    description: string;
    /** Format: ARRAY */
    technologies?: unknown[];
    /** Format: character varying */
    url: string;
  };
  Attachment: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    label: string;
    /** Format: character varying */
    url: string;
    /**
     * Format: public."AttachmentType"
     * @enum {string}
     */
    type: "IMAGE" | "LINK" | "DOCUMENT";
  };
  Member: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: character varying */
    position: string;
    /** Format: integer */
    yearOfExperiences: number;
  };
  Expertise: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default extensions.uuid_generate_v4()
     */
    id: string;
    /** Format: character varying */
    name: string;
    /** Format: text */
    description: string;
  };
  _member: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `Attachment.id`.<fk table='Attachment' column='id'/>
     */
    A: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `Member.id`.<fk table='Member' column='id'/>
     */
    B: string;
  };
  _experience: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `Attachment.id`.<fk table='Attachment' column='id'/>
     */
    A: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `Experience.id`.<fk table='Experience' column='id'/>
     */
    B: string;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description _prisma_migrations */
  "body._prisma_migrations": definitions["_prisma_migrations"];
  /** Format: character varying */
  "rowFilter._prisma_migrations.id": string;
  /** Format: character varying */
  "rowFilter._prisma_migrations.checksum": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.finished_at": string;
  /** Format: character varying */
  "rowFilter._prisma_migrations.migration_name": string;
  /** Format: text */
  "rowFilter._prisma_migrations.logs": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.rolled_back_at": string;
  /** Format: timestamp with time zone */
  "rowFilter._prisma_migrations.started_at": string;
  /** Format: integer */
  "rowFilter._prisma_migrations.applied_steps_count": string;
  /** @description Experience */
  "body.Experience": definitions["Experience"];
  /** Format: uuid */
  "rowFilter.Experience.id": string;
  /** Format: character varying */
  "rowFilter.Experience.name": string;
  /** Format: text */
  "rowFilter.Experience.shortDescription": string;
  /** Format: text */
  "rowFilter.Experience.description": string;
  /** Format: ARRAY */
  "rowFilter.Experience.technologies": string;
  /** Format: character varying */
  "rowFilter.Experience.url": string;
  /** @description Attachment */
  "body.Attachment": definitions["Attachment"];
  /** Format: uuid */
  "rowFilter.Attachment.id": string;
  /** Format: character varying */
  "rowFilter.Attachment.label": string;
  /** Format: character varying */
  "rowFilter.Attachment.url": string;
  /** Format: public."AttachmentType" */
  "rowFilter.Attachment.type": string;
  /** @description Member */
  "body.Member": definitions["Member"];
  /** Format: uuid */
  "rowFilter.Member.id": string;
  /** Format: character varying */
  "rowFilter.Member.name": string;
  /** Format: character varying */
  "rowFilter.Member.position": string;
  /** Format: integer */
  "rowFilter.Member.yearOfExperiences": string;
  /** @description Expertise */
  "body.Expertise": definitions["Expertise"];
  /** Format: uuid */
  "rowFilter.Expertise.id": string;
  /** Format: character varying */
  "rowFilter.Expertise.name": string;
  /** Format: text */
  "rowFilter.Expertise.description": string;
  /** @description _member */
  "body._member": definitions["_member"];
  /** Format: uuid */
  "rowFilter._member.A": string;
  /** Format: uuid */
  "rowFilter._member.B": string;
  /** @description _experience */
  "body._experience": definitions["_experience"];
  /** Format: uuid */
  "rowFilter._experience.A": string;
  /** Format: uuid */
  "rowFilter._experience.B": string;
}

export interface operations {}

export interface external {}
